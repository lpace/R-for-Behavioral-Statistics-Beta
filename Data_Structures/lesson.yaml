- Class: meta
  Course: statistics_courses
  Lesson: Data Structures
  Author: Larry Pace
  Type: Standard
  Organization: Keiser University
  Version: 2.2.21
  
- Class: text
  Output: Hi again, Dr. Larry here. Your previous lesson was on vectors. In this lesson, you will learn about other data structures including matrices, lists, and data frames.

- Class: text
  Output: In the world of R, a matrix is a vector with dimensions, but it is still a vector. On the other hand, a vector is not a one-dimensional matrix. It is possible to make a one-dimensional matrix if you need one. To show the difference, let's create a vector of the integers from 1 to 50.

- Class: cmd_question
  Output: "At the command prompt, type x <- 1:50 and press Enter."
  CorrectAnswer: x <- 1:50
  AnswerTests: omnitest(correctExpr='x <- 1:50')
  Hint: Type x <- 1:50 and press Enter.

- Class: cmd_question
  Output: Clearly, x is an integer vector, as you learned in the previous lesson. Let's make a matrix with 5 rows and 10 columns using the contents of x as our source. At the command prompt, type xMatrix <- matrix(x, nrow = 5, ncol = 10) and press Enter.
  CorrectAnswer: xMatrix <- matrix(x, nrow = 5, ncol = 10)
  AnswerTests: omnitest(correctExpr='xMatrix <- matrix(x, nrow = 5, ncol = 10)')
  Hint: Type xMatrix <- matrix(x, nrow = 5, ncol = 10) and press Enter.

- Class: cmd_question
  Output: Check the contents of xMatrix, as you have learned to do previously.
  CorrectAnswer: xMatrix
  AnswerTests: omnitest(correctExpr='xMatrix')
  Hint: Type xMatrix and press Enter.

- Class: text
  Output: As you see, Each cell of the matrix has a row index and a column index. You can also see that by default, R populated the matrix in a column-wise fashion. You can refer to an entire row or column by using a comma as an index. To clarify, the index of the cell with the number 50 in it is xMatrix[5, 10]. We can use this matrix-type indexing with data frames, too, as you will learn.

- Class: cmd_question
  Output: Let's determine the dimensions of our matrix. Type dim(xMatrix) and press Enter.
  CorrectAnswer: dim(xMatrix)
  AnswerTests: omnitest(correctExpr='dim(xMatrix)')
  Hint: Type dim(xMatrix) and press Enter.

- Class: text
  Output: As you see, the matrix has dimensionality, as defined by the number of rows and the number of columns. We can use many R functions with matrices, and we will address matrix manipulations in more depth in a future lesson. For now, let's concentrate on a few more basic aspects of matrices in our introduction to data structures. You might be interested to know that R can deal with higher-dimensional arrays, too, but we will confine ourselves to two-way matrices and data frames with rows and columns of data.

- Class: cmd_question
  Output: Let's use indexing with our matrix in a fashion similar to that we did with vectors in our previous lesson. Type xMatrix[1, ]  and press Enter to see the first row of the matrix.
  CorrectAnswer: xMatrix[1, ]
  AnswerTests: omnitest(correctExpr='xMatrix[1, ]')
  Hint: Type xMatrix[1, ] and press Enter.

- Class: cmd_question
  Output: Similarly, you can see the fifth column of the matrix by typing xMatrix[, 5] and pressing Enter.
  CorrectAnswer: xMatrix[, 5]
  AnswerTests: omnitest(correctExpr= ' xMatrix[, 5]')
  Hint: Type xMatrix[, 5] and press Enter.

- Class: cmd_question
  Output: As with vectors, you can name columns and rows of your matrices. Let's take advantage of the paste function and name the colums of our xMatrix x1, x2, x3, ..., x10. We must specify sep = "" to keep R from adding a space between the letter and the number. At the command prompt, type colnames(xMatrix) <- paste("x", 1:10, sep = "") and press Enter.
  CorrectAnswer: colnames(xMatrix) <- paste("x", 1:10, sep = "")
  AnswerTests: omnitest(correctExpr = 'colnames(xMatrix) <- paste("x", 1:10, sep = "")')
  Hint: Type colnames(xMatrix) <- paste("x", 1:10, sep = "") and press Enter.

- Class: cmd_question
  Output: "Now, use the built in letters to name the rows of our matrix. Type rownames(xMatrix) <- letters[1:5] and press Enter."
  CorrectAnswer: rownames(xMatrix) <- letters[1:5]
  AnswerTests: omnitest(correctExpr = 'rownames(xMatrix) <- letters[1:5]')
  Hint: Type rownames(xMatrix) <- letters[1:5] and press Enter.

- Class: cmd_question
  Output: With matrices, you can use the colSums and rowSums functions to calculate column or row sums. For example, let's determine the sum for each column in our xMatrix by typing colSums(xMatrix) and pressing Enter.
  CorrectAnswer: colSums(xMatrix)
  AnswerTests: omnitest(correctExpr='colSums(xMatrix)')
  Hint: Type colSums(xMatrix) and press Enter.

- Class: cmd_question
  Output: Now, let's look at the row sums. Type rowSums(xMatrix) and press Enter.
  CorrectAnswer: rowSums(xMatrix)
  AnswerTests: omnitest(correctExpr='rowSums(xMatrix)')
  Hint: Type rowSums(xMatrix) and press Enter.

- Class: text
  Output: There is much more we can do with matrices, but let's save that for a future lesson devoted exclusively to using matrix algebra and other manipulations for statistical compuations. Now you know about vectors and matrices. Let's look at another important data structure, the list. Unlike vectors, lists can contain more than one type of data. The indexing for lists is different from that for vectors and matrices, as well. We can use lists in various ways, as you will soon learn.

- Class: cmd_question 
  Output: Here's how we can create a list. Let's say we are making a bibliography, and want to create an entry for one of the books we are using. We will just use the author, title, and year to keep the example simple. At the command prompt type author <- "John W. Tukey" and press Enter. 
  CorrectAnswer: author <- "John W. Tukey"
  AnswerTests: omnitest(correctExpr='author <- "John W. Tukey"')
  Hint: Type author <- "John W. Tukey" and press Enter.

- Class: cmd_question
  Output: Now, type title <- "Exploratory Data Analysis" and press Enter.
  CorrectAnswer: title <- "Exploratory Data Analysis"
  AnswerTests: omnitest(correctExpr='title <- "Exploratory Data Analysis"')
  Hint: Type title <- "Exploratory Data Analysis" and press Enter.

- Class: cmd_question
  Output: Next, type year <- 1997
  CorrectAnswer: year <- 1997
  AnswerTests: omnitest(correctExpr='year <- 1997')
  Hint: Type year <- 1997 and press Enter.

- Class: cmd_question
  Output: Now we can make our list. Type book1 <- list(author, title, year) and press Enter.
  CorrectAnswer: book1 <- list(author, title, year)
  AnswerTests: omnitest(correctExpr='book1 <- list(author, title, year)')
  Hint: Type book1 <- list(author, title, year) and press Enter.

- Class: cmd_question
  Output: Type book1 and press Enter to see your list.
  CorrectAnswer: book1
  AnswerTests: omnitest(correctExpr='book1')
  Hint: Type book1 and press Enter.

- Class: text
  Output: As I indicated, lists use a different form of indexing. The list contains both character and numeric data, and each element has an index with double square brackets, such as book[[1]]. The double brackets in book[[1]] refer to the actual character or numeric entry in the first element of the list, while book[1] refers to the list containing that entry. This will become clearer in a moment.  

- Class: cmd_question
  Output: As we often do, let's check the structure of our list. Type str(book1) and press Enter.
  CorrectAnswer: str(book1)
  AnswerTests: omnitest(correctExpr='str(book1)')
  Hint: Type str(book1) and press Enter.

- Class: text
  Output: As you see, book1 is a list with three elements, each of which is a list itself. We can use lists for many different purposes in addition to combining different data types. For example, say I have three different classes, each of which has a different number of students, and I want to compare the mean test scores for the three classes. I can make a vector for each class, and then combine the vectors into a single list. Let's keep the example small to make things easier.

- Class: cmd_question
  Output: At the command prompt, type class1 <- c(78, 88, 93, 94, 92, 86) and press Enter.
  CorrectAnswer: class1 <- c(78, 88, 93, 94, 92, 86)
  AnswerTests: omnitest(correctExpr='class1 <- c(78, 88, 93, 94, 92, 86)')
  Hint: Type class1 <- c(78, 88, 93, 94, 92, 86) and press Enter.

- Class: cmd_question
  Output: Now, type class2 <- c(65, 82, 90, 82, 85) and press Enter.
  CorrectAnswer: class2 <- c(65, 82, 90, 82, 85)
  AnswerTests: omnitest(correctExpr='class2 <- c(65, 82, 90, 82, 85)')
  Hint: Type class1 <- class 2 <- c(65, 82, 90, 82, 85) and press Enter.

- Class: cmd_question
  Output: Last, type class3 <- c(78, 85, 89, 84) and press Enter.
  CorrectAnswer: class3 <- c(78, 85, 89, 84)
  AnswerTests: omnitest(correctExpr='class3 <- c(78, 85, 89, 84)')
  Hint: Type class3 <- c(65, 82, 90, 82, 85) and press Enter.

- Class: cmd_question
  Output: Here's where it gets a little more interesting. Combine all three classes into one list by typing classes <- list(class1, class2, class3)
  CorrectAnswer: classes <- list(class1, class2, class3)
  AnswerTests: omnitest(correctExpr='classes <- list(class1, class2, class3)')
  Hint: Type classes <- list(class1, class2, class3) and press Enter.

- Class: text
  Output: R has a family of functions that allow us to apply other R functions to vectors, matrices, lists, and data frames. Let's use the lapply function to find the means for the three classes.

- Class: cmd_question
  Output: At the command prompt, type lapply(classes, mean) and press Enter.
  CorrectAnswer: lapply(classes, mean)
  AnswerTests: omnitest(correctExpr='lapply(classes, mean)')
  Hint: Type lapply(classes, mean) and press Enter.

- Class: cmd_question
  Output: As you see, the lapply function created a new list with the separate means. If if is possible to do so, the sapply function will simplify the output. Type sapply(classes, mean) and press Enter.
  CorrectAnswer: sapply(classes, mean)
  AnswerTests: omnitest(correctExpr='sapply(classes, mean)')
  Hint: Type sapply(classes, mean) and press Enter.

- Class: text
  Output: See that the sapply function produced a vector here, rather than a list, making the output easier to read. Now that you have worked with matrices and lists, let's look at the data frame. In R, a data frame is rectangular like a matrix. That means that the data frame is arranged by rows and columns and can be addressed like a matrix with two indexes. Every column has the same number of rows. You can also address variables in data frames by their names, as you will soon seel

- Class: text
  Output: Data frames, like lists, can also contain different data types. In fact, to R, a data frame is also a list, just a special one in which each column has the same number of rows, as in a matrix. Data frames are the most common way to store and use data in R.

- Class: cmd_question
  Output: There are many ways to create data frames in R, and you can read data from a variety of formats into data frames. Because we have been dealing with individuals and quiz scores, let's create a data frame by creating a vector of student names and a vector of test scores, and then making a data frame from the combination. At the command prompt, type scores <- c(99, 88, 74, 92, 79) and press Enter.
  CorrectAnswer: scores <- c(99, 88, 74, 92, 79)
  AnswerTests: omnitest(correctExpr='scores <- c(99, 88, 74, 92, 79)')
  Hint: Type scores <- c(99, 88, 74, 92, 79) and press Enter.

- Class: cmd_question
  Output: Now, we will make a vector of the names of our students. At the command prompt, type students <- c("Shirley", "Saahira", "Payton", "Jordan", "Nathan") and press Enter.
  CorrectAnswer: students <- c("Shirley", "Saahira", "Payton", "Jordan", "Nathan")
  AnswerTests: omnitest(correctExpr='students <- c("Shirley", "Saahira", "Payton", "Jordan", "Nathan")')
  Hint: Type students <- c("Shirley", "Saahira", "Payton", "Jordan", "Nathan") and press Enter.

- Class: cmd_question
  Output: Now, let's make a data frame from our students' names and test scores. In order to keep R from making our student names into a factor, we will use the setting stringsAsFactors = FALSE. At the command prompt, type testScores <- data.frame(students, scores, stringsAsFactors = FALSE) and press Enter
  CorrectAnswer: testScores <- data.frame(students, scores, stringsAsFactors = FALSE)
  AnswerTests: omnitest(correctExpr='testScores <- data.frame(students, scores, stringsAsFactors = FALSE)')
  Hint: Type testScores <- data.frame(students, scores, stringsAsFactors = FALSE) and press Enter.

- Class: cmd_question
  Output: Now, let's add a vector of students' sexes to the data frame. At the command prompt, type sex <- c("female", "female", "female", "male", "male") and press Enter.
  CorrectAnswer: sex <- c("female", "female", "female", "male", "male")
  AnswerTests: omnitest(correctExpr='sex <- c("female", "female", "female", "male", "male")')
  Hint: Type sex <- c("female", "female", "female", "male", "male") and press Enter.

- Class: text
  Output: We can address the vectors in data frames either by matrix-type indexing or by using a $ to separate the data frame name and the variable name. We can also attach the data frame and use the variable names directly.

- Class: cmd_question
  Output: "Let's add our character vector of the sexes to the data frame. One of several ways to do this is to declare the new variable to be part of the data frame. Let's do it that way. At the command prompt, type testScores$sex <- sex and press Enter."
  CorrectAnswer: testScores$sex <- sex
  AnswerTests: omnitest(correctExpr='testScores$sex <- sex')
  Hint: Type testScores$sex <- sex and press Enter.

- Class: cmd_question
  Output: Now, check the structure of our data frame by typing str(testScores) and pressing Enter.
  CorrectAnswer: str(testScores)
  AnswerTests: omnitest(correctExpr='str(testScores)')
  Hint: Type str(testScores) and press Enter.
