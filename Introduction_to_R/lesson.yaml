- Class: meta
  Course: Getting Started
  Lesson: Introduction to R
  Author: Larry Pace
  Type: Standard
  Organization: Keiser University
  Version: 2.2.21
  
- Class: text
  Output: Hi, I'm Dr. Larry Pace, your instructor for this series of lessons on how to use R for the behavioral and social sciences. I am happy to be working with you and would appreciate any feedback you might have on these lessons.

- Class: text
  Output: In this introductory lesson, we will discuss some of the basics of R. I highly recommend that you use for these lessons, although they will work with the regular version of R as well.

- Class: text
  Output: In R, everything is an object of some sort. We also work with functions in R. This makes R simultaneously object-oriented and functional. In this lesson, you will get a better feeling for R functions and objects and how they work. R is a programming language and statistical computing environment rolled into one. 

- Class: text
  Output: The most basic use of R is as an interactive calculator. In the R console, the command prompt is >, a "greater than" sign. It is R's way of telling you it is ready for your instructions. You type a command or expression and then press the Enter key. R interprets your instructions and attempts to do what you have asked. 

- Class: text
  Output: If R can do what you have told it to do, it will. Depending on what you have specifically instructed R to do, you may see output in the next line or lines of the console before you see another command prompt, or you may simply see another command prompt. If you have asked R to produce graphical output, R will open a new window to display that. 

- Class: text
  Output: If R does not understand what you are asking, it will give you an error message. Sometimes, R does what you have asked, but gives you one or more warnings that something may not be quite right.

- Class: cmd_question
  Output: To R, even a single number or character is a vector. Other computer languages allow you to define a constant or scalar value, but R does not. To see what I mean, at the command prompt, type 2 + 2 and press Enter.
  CorrectAnswer: 2 + 2
  AnswerTests: omnitest(correctExpr = '2 + 2')
  Hint: Type 2 + 2 and press Enter.

- Class: text
  Output: Note the [1] in front of the answer to your addition problem. It is an index telling you that to R, 4 is a vector of length 1. R makes use of vectorization in  ways that help with statistical computations. Vectorization also helps you avoid explicit loops in many cases.

- Class: cmd_question
  Output: Let's create an object called x and assign the result of our addition to that object. The assignment operator in R is <-, the combination of a "less than" sign and a dash. Think of it as a leftward-pointing arrow. Whatever is on the right side is assigned to the "object" on the left side. At the command prompt, type x <- 2 + 2 and press Enter.
  CorrectAnswer: x <- 2 + 2
  AnswerTests: omnitest(correctExpr = 'x <- 2 + 2')
  Hint: Type x <- 2 + 2 and press Enter.

- Class: text
  Output: R is case sensitive, so as far as R is concerned, x and X are two different things. When you assign a value to an object, R does not automatically print your answer to the console, as we discussed above, but you can see the contents of any R object by typing its name and pressing Enter.

- Class: cmd_question
  Output: At the command prompt, type x and press Enter.
  CorrectAnswer: x
  AnswerTests: omnitest(correctExpr = 'x')
  Hint: Type x and press Enter.

- Class: cmd_question
  Output: One of the R functions you should learn is str(). It will tell you about the structure of an R object. For more complex objects, you will get more information than for simple objects. Type str(x) at the command prompt and press Enter.
  CorrectAnswer: str(x)
  AnswerTests: omnitest(correctExpr= 'str(x)')
  Hint: Type str(x) and press Enter.

- Class: cmd_question
  Output: Correct. This tells us x is a numeric object with the value of 4. Like str(), the math operators in R are also functions themselves. These functions include addition, subtraction, multiplication, division, and exponentiation (along with very many others). Let's practice these functions with our named object x. You can mix variable names and numbers in your expressions. For example, at the command prompt, type x + 2 and press Enter.
  CorrectAnswer: x + 2
  AnswerTests: omnitest(correctExpr= 'x + 2')
  Hint: Type x + 2 and press Enter.

- Class: cmd_question
  Output: Now, let's try subtracting x from itself. Type x - x and press Enter.
  CorrectAnswer: x - x
  AnswerTests: omnitest(correctExpr = 'x - x')
  Hint: Type x - x and press Enter.

- Class: cmd_question
  Output: Let's multiply x by itself. Type x * x and press Enter.
  CorrectAnswer: x * x
  AnswerTests: omnitest(correctExpr = 'x * x')
  Hint: Type x * x and press Enter.

- Class: cmd_question
  Output: Now, divide x by itself. You should be able to predict the answer. Type x / x and press Enter.
  CorrectAnswer: x / x
  AnswerTests: omnitest(correctExpr = 'x / x')
  Hint: Type x / x and press Enter.

- Class: cmd_question
  Output: Now, let's square x by using the ^ symbol for exponentiation. Type x ^ 2 and press Enter.
  CorrectAnswer: x ^ 2
  AnswerTests: omnitest(correctExpr = 'x ^ 2')
  Hint: Type x ^ 2 and press Enter.

- Class: text
  Output: R follows the standard order of operations in evaluating mathematical expressions. The standard order is parentheses, exponentiation, multiplication, division, addition, and subtraction (PEMDAS). You can use parentheses to control the order in which operations are performed. 

- Class: text
  Output: R also allows you to use the modulus operator and integer division. These may take a bit of explaining. The modulus operation for two numbers shows the remainder of the division of the number on the left by the number on the right, so if x is 10 and y is 3, x mod y is 1, the remainder. We use %% to represent modulus in R. Integer division shows us the integer result of the division without the remainder, and we use %/% to represent integer division. The result of x %/% y would be 3, the integer result.

- Class: cmd_question
  Output: At the command prompt, type 17 %% 4 and press Enter.
  CorrectAnswer: 17 %% 4
  AnswerTests: omnitest(correctExpr = '17 %% 4')
  Hint: Type 17 %% 4 and press Enter.

- Class: cmd_question
  Output: Now, type 17 %/% 4 and press Enter.
  CorrectAnswer: 17 %/% 4
  AnswerTests: omnitest(correctExpr = '17 %/% 4')
  Hint: Type 17 %/% 4 and press Enter.

- Class: text
  Output: In addition to math, R allows you to perform logical comparisons. These include < for less than, <= for less than or equal to, > for greater than, >= for greater than or equal to, == for exactly equal to, and != for not equal to. When we perform such comparisons, R will return a logical TRUE or a logical FALSE for each comparison.

- Class: cmd_question
  Output: At the command prompt, type 8 < 10 and press Enter.
  CorrectAnswer: 8 < 10
  AnswerTests: omnitest(correctExpr = '8 < 10')
  Hint: Type 8 < 10 and press Enter.

- Class: cmd_question
  Output: As another example, type 8 != 8 and press Enter.
  CorrectAnswer: 8 != 8
  AnswerTests: omnitest(correctExpr = '8 != 8')
  Hint: Type 8 != 8


- Class: cmd_question
  Output: You have just learned that you can do math and logical comparisons in R. There are many other built-in functions in addition to mathematical and statistical functions. Some of these help you understand what is in your current R workspace (that is, your R session) and in your current working directory (the directory in which your R session is running). To determine your current working directory, type getwd() and press Enter.
  CorrectAnswer: getwd()
  AnswerTests: omnitest(correctExpr = 'getwd()')
  Hint: Type getwd() and press Enter.

- Class: cmd_question
  Output: To see the contents of your current working directory, type dir() and press Enter.
  CorrectAnswer: dir()
  AnswerTests: omnitest(correctExpr= 'dir()')
  Hint: Type dir() and press Enter.

- Class: cmd_question
  Output: To see a list of the objects in your current workspace, type ls() and press Enter.
  CorrectAnswer: ls()
  AnswerTests: omnitest(correctExpr = 'ls()')
  Hint: Type ls() and press Enter.

- Class: text
  Output: You have nearly finished your introductory lesson. Let's take a little time to review, and then I'll give you a very short quiz on what you have learned. In R, everything that exists is an object of some sort, and everything we do to objects involves calling functions, whether they are built-in functions, functions in add-on packages, or even functions we write ourselves.

- Class: text
  Output: The most basic use of R is as an interactive calculator, but the power of R is that you can assign values to objects and then use the objects in your commands and expressions. R has a large number of built-in functions, including the mathematical operators, statistical functions, and many others.

- Class: text
  Output: You can mix variable names and numbers in your commands and expressions, but you must always remember that to R, a single number or a single character is still a vector of length 1. Vectorization is one of the key features of R.

- Class: text
  Output: R also has built-in functions that help you determine both the location of your working directory and its contents, as well as the current R session and its associated objects. Ready? Here's a short quiz.

- Class: mult_question
  Output: In R, everything that exists is a(n) _________ of some sort.
  AnswerChoices: object;vector;data value; program
  CorrectAnswer: object
  AnswerTests: omnitest(correctVal= 'object')
  Hint: Remember what happens when you use the assignment operator.

- Class: mult_question
  Output: Everything you do to an object in R involves using _________.
  AnswerChoices: functions;objects;vectors; statistics
  CorrectAnswer: functions
  AnswerTests: omnitest(correctVal= 'functions')
  Hint: Remember that we "do" things in R by using functions, and that everything in R involves a function call of some kind.

- Class: mult_question
  Output: To R, even a single number or character is still a _________.
  AnswerChoices: vector; scalar; function; data point
  AnswerTests: omnitest(correctVal = 'vector')
  Hint: Remember what the index [1] in front of the answer to your addition problem represented.

- Class: mult_question
  Output: To see the list of the objects in your current R session, you should type _______ and press Enter.
  AnswerChoices: ls(); dir(); getwd(); setwd()
  AnswerTests: omnitest(correctVal = 'ls()')
  Hint: To list the objects in your current workspace, use ls().

- Class: text
  Output: Congratulations! You have finished the introductory lesson. Now you know enough about R functions and objects to move ahead into a more detailed lesson on working with vectors in R. See you soon!
